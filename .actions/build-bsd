#!/bin/sh -eux
BASE_URL="https://builds.sr.ht"
MANIFEST=$(mktemp)
trap "rm -f ${MANIFEST}" EXIT

# construct the sourcehut build manifest
cat > "${MANIFEST}" <<- EOF
image: ${IMAGE}
packages:
  - cmake
  - llvm
EOF

case "${IMAGE}" in
	freebsd*)
cat >> "${MANIFEST}" <<- EOF
  - libcbor
  - pkgconf
EOF
	;;
esac

cat >> "${MANIFEST}" <<- EOF
sources:
  - ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}#$(git rev-parse HEAD)
tasks:
  - build: |
      if [ "\$(uname)" = "OpenBSD" ]; then
        SUDO="doas -u root"
      else
        SUDO=sudo
      fi
      SCAN="/usr/local/bin/scan-build --use-cc=/usr/bin/cc --status-bugs"
      cd libfido2
      for T in Debug Release; do
        mkdir build-\$T
        (cd build-\$T && \${SCAN} cmake -DCMAKE_BUILD_TYPE=\$T ..)
        \${SCAN} make -j"\$(sysctl -n hw.ncpu)" -C build-\$T
        \${SUDO} make -C build-\$T install
      done
EOF


q() {
	curl \
		--silent \
		--oauth2-bearer "${SOURCEHUT_TOKEN}" \
		--header "Content-Type: application/json" \
		--data @- -- \
		"${BASE_URL}/query"
}

submit_job() {
	local manifest="$1"
	jq \
		--compact-output --null-input \
		'{ query: $body, variables: { var: $var } }' \
		--arg body 'mutation($var: String!) { submit(manifest: $var) { id } }' \
		--rawfile var "${manifest}" \
	| q \
	| jq --raw-output '.data.submit.id'
}

job_status() {
	local id="$1"
	jq \
		--compact-output --null-input \
		'{ query: $body, variables: { var: $var } }' \
		--arg body 'query($var: Int!) { job(id: $var) { status } }' \
		--argjson var "${id}" \
	| q \
	| jq --raw-output '.data.job.status'
}

JOB_ID="$(submit_job "${MANIFEST}")"
[ -z "${JOB_ID}" ] && exit 1
echo "Job '${JOB_ID}' running at ${BASE_URL}/~yubico-libfido2/job/${JOB_ID}"

while true; do
	case "$(job_status "${JOB_ID}")" in
		SUCCESS) exit 0;;
		FAILED) exit 1;;
		PENDING|QUEUED|RUNNING) ;;
		*) exit 1;;
	esac
	sleep 60
done
